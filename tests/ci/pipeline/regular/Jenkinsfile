// Copyright (c) 2022,2023, Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
//

// handle to util functions module
def utils;

// job ids to copy proper artifact for a given build
def jobIds = [:];

pipeline {
	agent {
		node {
			label 'operator-ci'
		}
	}
	parameters {
		string(name: 'OPERATOR_GIT_REPO_URL', defaultValue: "${env.MYREPO_GIT_REPO_URL}", description: 'a git repository url', trim: true)
		string(name: 'OPERATOR_GIT_REPO_NAME', defaultValue: 'origin', description: 'a git repository name, e.g. origin, gerrit', trim: true)
		string(name: 'OPERATOR_GIT_REVISION', description: 'a git revision or branch to run against', trim: true)
		string(name: 'OPERATOR_GIT_REFSPEC', defaultValue: "${params.OPERATOR_GIT_REVISION}", description: 'a git refspec - commit id or gerrit patchset', trim: true)
		string(name: 'OPERATOR_GIT_BRANCH', description: 'a readable git branch name', trim: true)
		string(name: 'OPERATOR_IMAGE', description: 'an image related to the aforementioned git revision', trim: true)
		string(name: 'OPERATOR_ENTERPRISE_IMAGE', description: '...and a related enterprise image, it can be empty, then it will be built locally', trim: true)
		string(name: 'OPERATOR_TRIGGERED_BY', defaultValue: 'concourse', description: 'how the build was triggered - the following flows are supported: concourse, internal, or gerrit', trim: true)
		string(name: 'OPERATOR_EXECUTION_ENVIRONMENT', defaultValue: 'local', description: 'where workers should run - locally or on the OCI instances - the following values are supported: local, oci', trim: true)
		booleanParam(name: 'OPERATOR_BUILD_IMAGES', defaultValue: false, description: 'indicates whether the images should be built locally by us (e.g. in case of a push to a dev branch) or use ones delivered externally (e.g. from the concourse)')
		booleanParam(name: 'OPERATOR_ALLOW_WEEKLY_IMAGES', defaultValue: true, description: 'allows to use the not-so-stable router and server weekly images')
		string(name: 'OPERATOR_GERRIT_CHANGE_URL', description: 'link to gerrit Code Review', trim: true)
		string(name: 'OPERATOR_GERRIT_TOPIC', description: 'name of a dev branch used for gerrit CR', trim: true)
		string(name: 'OPERATOR_GERRIT_CHANGE_NUMBER', description: 'gerrit CR change number', trim: true)
		string(name: 'OPERATOR_GERRIT_PATCHSET_NUMBER', description: 'gerrit CR patchset number', trim: true)
		string(name: 'OPERATOR_GERRIT_CHANGE_ID', description: 'gerrit CR Change-ID', trim: true)
	}
 	options {
		timeout(time: 24, unit: 'HOURS')
		timestamps()
	}
	stages {
		stage('init') {
			steps {
				script {
					utils = load "${WORKSPACE}/tests/ci/pipeline/utils.groovy"
					utils.initEnv()

					slackSend channel: "${env.SLACK_CHANNEL}",
						color: utils.getIntroColor(),
						attachments: utils.getIntroContents()

					sh "mkdir -p ${env.LOG_DIR}"

					build job: "${env.WORKERS_FOLDER}/init", parameters: [
						string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
						string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
						string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
						string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
						string(name: 'OPERATOR_IMAGE', value: params.OPERATOR_IMAGE),
						string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
						string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
						booleanParam(name: 'OPERATOR_BUILD_IMAGES', value: params.OPERATOR_BUILD_IMAGES),
						booleanParam(name: 'OPERATOR_ALLOW_WEEKLY_IMAGES', value: params.OPERATOR_ALLOW_WEEKLY_IMAGES)
					]
					env.INIT_STAGE_SUCCEEDED = true
				}
			}
		}
		stage('build') {
			when {
				expression { params.OPERATOR_BUILD_IMAGES }
			}
			steps {
				script {
					build job: "${env.WORKERS_FOLDER}/build", parameters: [
						string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
						string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
						string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
						string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
						string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
						string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
						string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
						booleanParam(name: 'OPERATOR_BUILD_IMAGES', value: params.OPERATOR_BUILD_IMAGES)
					]
					env.BUILD_STAGE_SUCCEEDED = true
				}
			}
		}
		stage('test') {
			parallel {
				stage('minikube') {
					steps {
						script {
							def k8sEnv = 'minikube'
							def (executionInstanceLabel, executionInstanceCount, clustersPerInstance, nodesPerCluster, nodeMemory) =
								utils.getExecutionParams(k8sEnv, maxClustersPerInstance='3', nodesPerCluster='1')
							echo "[$k8sEnv, $executionInstanceLabel, $executionInstanceCount, $clustersPerInstance, $nodesPerCluster, $nodeMemory]"
							def k8sJob = null
							catchError {
								k8sJob = build job: utils.getWorkerJobPath(k8sEnv), parameters: [
									string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
									string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
									string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
									string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
									string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
									string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
									string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
									[$class: 'LabelParameterValue', name: 'OPERATOR_EXECUTION_INSTANCE', label: executionInstanceLabel],
									string(name: 'OPERATOR_CLUSTERS_COUNT', value: clustersPerInstance),
									string(name: 'OPERATOR_NODES_PER_CLUSTER', value: nodesPerCluster),
									string(name: 'OPERATOR_NODE_MEMORY', value: nodeMemory)
								], propagate: false
							}
							if (k8sJob != null) {
								jobIds[k8sEnv] = k8sJob.getNumber()
								echo "${k8sEnv} completed (build #${k8sJob.getNumber()})"
							}
						}
					}
					post {
						always {
							script {
								def k8sEnv = 'minikube'
								def k8sJob = jobIds[k8sEnv]
								if (k8sJob) {
									echo "copy ${k8sEnv} results for build #${k8sJob}"
									catchError {
										copyArtifacts fingerprintArtifacts: true,
											projectName: utils.getWorkerJobPath(k8sEnv),
											selector: specific(buildNumber: "${k8sJob}"),
											target: "${env.LOG_SUBDIR}"
									}
								} else {
									echo "no results for ${k8sEnv}, job id not found"
								}
							}
						}
						cleanup {
							script {
								env.MINIKUBE_RESULT_STATUS = utils.addTestResults("minikube", 1)
							}
						}
					}
				}
				stage('k3d') {
					steps {
						script {
							// in case the test suite runs on local execution environment (operator-ci), run k3d
							// clusters with some delay (in seconds), after all minikube clusters already
							// have started
							// when clusters start at the same moment, they may fail randomly
							utils.delayLocalJob(300)

							def k8sEnv = 'k3d'
							def (executionInstanceLabel, executionInstanceCount, clustersPerInstance, nodesPerCluster, nodeMemory) =
								utils.getExecutionParams(k8sEnv, maxClustersPerInstance='4', nodesPerCluster='1')
							echo "[$k8sEnv, $executionInstanceLabel, $clustersPerInstance, $nodesPerCluster, $nodeMemory]"
							def k8sJob = null
							catchError {
								k8sJob = build job: utils.getWorkerJobPath(k8sEnv), parameters: [
									string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
									string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
									string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
									string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
									string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
									string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
									string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
									[$class: 'LabelParameterValue', name: 'OPERATOR_EXECUTION_INSTANCE', label: executionInstanceLabel],
									string(name: 'OPERATOR_CLUSTERS_COUNT', value: clustersPerInstance),
									string(name: 'OPERATOR_NODES_PER_CLUSTER', value: nodesPerCluster),
									string(name: 'OPERATOR_NODE_MEMORY', value: nodeMemory)
								], propagate: false
							}
							if (k8sJob != null) {
								jobIds[k8sEnv] = k8sJob.getNumber()
								echo "${k8sEnv} completed (build #${k8sJob.getNumber()})"
							}
						}
					}
					post {
						always {
							script {
								def k8sEnv = 'k3d'
								def k8sJob = jobIds[k8sEnv]
								if (k8sJob) {
									echo "copy ${k8sEnv} results for build #${k8sJob}"
									catchError {
										copyArtifacts fingerprintArtifacts: true,
											projectName: utils.getWorkerJobPath(k8sEnv),
											selector: specific(buildNumber: "${k8sJob}"),
											target: "${env.LOG_SUBDIR}"
									}
								} else {
									echo "no results for ${k8sEnv}, job id not found"
								}
							}
						}
						cleanup {
							script {
								env.K3D_RESULT_STATUS = utils.addTestResults("k3d", 1)
							}
						}
					}
				}
			}
			post {
				always {
					script {
						if (utils.anyResultsAvailable()) {
							build job: "${env.WORKERS_FOLDER}/prepare-test-suite-report", parameters: [
								string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
								string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
								string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
								string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
								string(name: 'TEST_RESULT_BUILD_URL', value: env.BUILD_URL)
							]

							copyArtifacts fingerprintArtifacts: true,
								projectName: "${env.WORKERS_FOLDER}/prepare-test-suite-report",
								selector: lastCompleted(),
								target: "${env.LOG_SUBDIR}"

							env.TEST_SUITE_REPORT = utils.getTestSuiteReport()
						} else {
							env.TEST_SUITE_REPORT = ""
						}
					}
				}
				cleanup {
					script {
						env.TESTS_SUITE_ISSUES = utils.getTestsSuiteIssues(false)
					}
				}
			}
		}
	}
	post {
		always {
			script {
				env.BUILD_DURATION = utils.getBuildDuration()
				env.CHANGE_LOG = utils.getChangeLog()

				utils.listFilesInSubdir(env.LOG_SUBDIR)
				if (utils.anyResultsAvailable()) {
					sh "cd ${env.LOG_DIR} && tar cjf ${ARTIFACT_PATH} *"
					archiveArtifacts artifacts: "${ARTIFACT_FILENAME}", fingerprint: true
				}
			}
		}
		changed {
			script {
				utils.modifyBuildStatus("changed")
			}
		}
		fixed {
			script {
				utils.modifyBuildStatus("fixed")
			}
		}
		unstable {
			script {
				utils.modifyBuildStatus("unstable")
			}
		}
		regression {
			script {
				utils.modifyBuildStatus("regression")
			}
		}
		failure {
			script {
				utils.modifyBuildStatus("failure")
			}
		}
		aborted {
			script {
				utils.modifyBuildStatus("aborted")
			}
		}
		unsuccessful {
			script {
				utils.modifyBuildStatus("unsuccessful")
			}
		}
		success {
			script {
				utils.modifyBuildStatus("success")
			}
		}
		cleanup {
			script {
				slackSend channel: "${env.SLACK_CHANNEL}",
					color: utils.getBuildResultColor(),
					attachments: utils.getBuildSummary()

				utils.pruneOldBuilds()
			}
		}
	}
}

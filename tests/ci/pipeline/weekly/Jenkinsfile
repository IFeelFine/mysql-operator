// Copyright (c) 2022,2023 Oracle and/or its affiliates.
//
// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/
//

// handle to util functions module
def utils;

// counters for each environment, to get how many version have been tested
def minikubeRuns = 0
def k3dRuns = 0
def kindRuns = 0

pipeline {
	agent {
		node {
			label 'operator-ci'
		}
	}
	parameters {
		string(name: 'OPERATOR_GIT_REPO_URL', description: 'a git repository url', trim: true)
		string(name: 'OPERATOR_GIT_REPO_NAME', description: 'a git repository name, e.g. origin, gerrit ', trim: true)
		string(name: 'OPERATOR_GIT_REVISION', defaultValue: 'trunk', description: 'a git revision or branch to run against', trim: true)
		string(name: 'OPERATOR_GIT_REFSPEC', description: 'a git refspec - commit sha or gerrit patchset', trim: true)
		string(name: 'OPERATOR_GIT_BRANCH', description: 'a readable git branch name', trim: true)
		string(name: 'OPERATOR_IMAGE', description: 'an image related to the aforementioned git revision', trim: true)
		string(name: 'OPERATOR_ENTERPRISE_IMAGE', description: '...and a related enterprise image, it can be empty, then it will be built locally', trim: true)
		string(name: 'OPERATOR_TRIGGERED_BY', defaultValue: 'concourse', description: 'how the build was triggered - the following flows are supported: concourse, internal, or gerrit', trim: true)
		booleanParam(name: 'OPERATOR_BUILD_IMAGES', defaultValue: false, description: 'indicates whether the images should be built locally by us (e.g. in case of a push to a dev branch) or use ones delivered externally (e.g. from the concourse)')
		booleanParam(name: 'OPERATOR_ALLOW_WEEKLY_IMAGES', defaultValue: true, description: 'allows to use the not-so-stable router and server weekly images')
	}
 	options {
		timeout(time: 48, unit: 'HOURS')
		timestamps()
	}
	stages {
		stage('init') {
			steps {
				script {
					utils = load "${WORKSPACE}/tests/ci/pipeline/utils.groovy"
					utils.initEnv()

					slackSend channel: "${env.SLACK_CHANNEL}",
						color: utils.getIntroColor(),
						attachments: utils.getIntroContents()

					sh 'mkdir -p ${LOG_DIR}'

					build job: "${env.WORKERS_FOLDER}/init", parameters: [
						string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
						string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
						string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
						string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
						string(name: 'OPERATOR_IMAGE', value: params.OPERATOR_IMAGE),
						string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
						string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
						booleanParam(name: 'OPERATOR_BUILD_IMAGES', value: params.OPERATOR_BUILD_IMAGES),
						booleanParam(name: 'OPERATOR_ALLOW_WEEKLY_IMAGES', value: params.OPERATOR_ALLOW_WEEKLY_IMAGES)
					]
					env.INIT_STAGE_SUCCEEDED = true
				}
			}
		}
		stage('build') {
			when {
				expression { params.OPERATOR_BUILD_IMAGES }
			}
			steps {
				script {
					build job: "${env.WORKERS_FOLDER}/build", parameters: [
						string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
						string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
						string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
						string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
						string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
						string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
						string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY),
						booleanParam(name: 'OPERATOR_BUILD_IMAGES', value: params.OPERATOR_BUILD_IMAGES)
					]
					env.BUILD_STAGE_SUCCEEDED = true
				}
			}
		}
		stage('minikube') {
			matrix {
				axes {
					axis {
						name 'K8S_ENVIRONMENT'
						values 'minikube'
					}
					// k8s versions to run against in weekly builds, source of inspiration:
					// https://docs.oracle.com/en-us/iaas/Content/ContEng/Concepts/contengaboutk8sversions.htm#supportedk8sversions
					// https://github.com/kubernetes/minikube/releases/
					// check also the list of old releases
					// https://kubernetes.io/releases/patch-releases/#support-period
					// https://github.com/kubernetes/kubernetes/releases
					// curl -L https://dl.k8s.io/release/v1.23.14/bin/linux/amd64/kubectl -o kubectl-v1.23.14
					// curl -L https://github.com/kubernetes/minikube/releases/download/v1.27.1/minikube-linux-amd64 -o minikube-v1.27.1
					// format of values: 'minikube-version;k8s-version;kubectl-version;workers-count;nodes-count-per-worker;node-memory-limit;ip-family',
					//				e.g. 'minikube-v1.22.0;v1.21.5;kubectl-v1.21.14;5;1;8192;ipv4' - 5 workers with 1 node each, 8GB limit per node
					// 					 'minikube-v1.25.2;v1.23.4;kubectl-v1.23.4;3;2;4096;ipv4' - 3 workers with 2 nodes each, 4GB limit per node
					axis {
						name 'K8S_VERSION'
						values 'minikube-v1.22.0;v1.21.5;kubectl-v1.21.14;5;1;8192;ipv4',
							'minikube-v1.24.0;v1.22.5;kubectl-v1.22.17;5;1;8192;ipv4',
							'minikube-v1.25.2;v1.23.4;kubectl-v1.23.4;5;1;8192;ipv4',
							'minikube-v1.26.1;v1.24.1;kubectl-v1.24.8;4;1;8192;ipv4',
							'minikube-v1.28.0;v1.25.5;kubectl-v1.25.6;4;1;8192;ipv4',
							'minikube-v1.29.0;v1.26.1;kubectl-v1.26.1;4;1;8192;ipv4',
							'minikube-v1.30.1;v1.27.0;kubectl-v1.27.0;4;1;8192;ipv4'
							// 'minikube-v1.27.1;v1.25.2;kubectl-v1.25.5;2;2;8192;'
							// 'minikube-v1.28.0;v1.26.0;kubectl-v1.26.0;3;1',
							// 'minikube-v1.28.0;v1.26.0;kubectl-v1.26.0;1;2'
					}
				}
				stages {
					stage('minikube run tests') {
						steps {
							script {
								minikubeRuns++
								def (env_binary_path, k8s_version, kubectl_path, workers_count, nodes_count, node_memory, ip_family) =  "${K8S_VERSION}".split(';')
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) [$env_binary_path, $k8s_version, $kubectl_path, $workers_count, $nodes_count, $node_memory, $ip_family]"
								catchError {
									build job: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}", parameters: [
										string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
										string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
										string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
										string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
										string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
										string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
										string(name: 'OPERATOR_ENV_BINARY_PATH', value: env_binary_path),
										string(name: 'OPERATOR_K8S_VERSION', value: k8s_version),
										string(name: 'OPERATOR_KUBECTL_PATH', value: kubectl_path),
										string(name: 'OPERATOR_WORKERS_COUNT', value: workers_count),
										string(name: 'OPERATOR_NODES_COUNT', value: nodes_count),
										string(name: 'OPERATOR_NODE_MEMORY', value: node_memory),
										string(name: 'OPERATOR_IP_FAMILY', value: ip_family),
										string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY)
									]
								}
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) completed"
							}
						}
						post {
							always {
								echo "copy ${K8S_ENVIRONMENT}(${K8S_VERSION}) results"
								catchError {
									copyArtifacts fingerprintArtifacts: true,
										projectName: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}",
										selector: lastCompleted(),
										target: "${LOG_SUBDIR}"
								}
							}
						}
					}
				}
			}
			post {
				always {
					script {
						env.MINIKUBE_RESULT_STATUS = utils.addTestResults("minikube", minikubeRuns)
					}
				}
			}
		}
		stage('k3d') {
			matrix {
				axes {
					axis {
						name 'K8S_ENVIRONMENT'
						values 'k3d'
					}
					// use versions similar to k3d, but a little different
					// https://github.com/k3d-io/k3d/releases
					// https://hub.docker.com/r/rancher/k3s/tags
					// curl -L https://github.com/k3d-io/k3d/releases/download/v5.4.6/k3d-linux-amd64 -o k3d-v5.4.6
					// format of values: 'k3d-version;k8s-version-image;kubectl-version;workers-count;nodes-count-per-worker;node-memory-limit;ip-family',
					//				e.g. 'k3d-v5.2.2;rancher/k3s:v1.21.11-k3s1;kubectl-v1.21.14;3;3;4096;ipv4' - 3 workers with 3 nodes each, 4GB limit per node
					// 					 'k3d-v5.4.4;rancher/k3s:v1.23.5-k3s1;kubectl-v1.23.14;5;1;8192;ipv4' - 5 workers with 1 node each, 8GB limit per node
					axis {
						name 'K8S_VERSION'
						values 'k3d-v5.2.2;rancher/k3s:v1.21.11-k3s1;kubectl-v1.21.14;12;1;8192;ipv4',
							'k3d-v5.4.1;rancher/k3s:v1.22.7-k3s1;kubectl-v1.22.17;12;1;8192;ipv4',
							'k3d-v5.4.4;rancher/k3s:v1.23.5-k3s1;kubectl-v1.23.14;6;1;8192;ipv4',
							'k3d-v5.4.6;rancher/k3s:v1.24.7-k3s1;kubectl-v1.24.4;6;1;8192;ipv4',
							'k3d-v5.4.6;rancher/k3s:v1.25.3-k3s1;kubectl-v1.25.4;6;1;8192;ipv4',
							'k3d-v5.4.6;rancher/k3s:v1.26.0-k3s2;kubectl-v1.25.6;6;1;8192;ipv4',
							'k3d-v5.4.6;rancher/k3s:v1.26.0-k3s1;kubectl-v1.26.0;2;3;8192;ipv4',
							'k3d-v5.4.7;rancher/k3s:v1.26.1-k3s1;kubectl-v1.26.1;6;1;8192;ipv4',
							'k3d-v5.5.1;rancher/k3s:v1.27.1-k3s1;kubectl-v1.27.2;6;1;8192;ipv4'
					}
				}
				stages {
					stage('k3d run tests') {
						steps {
							script {
								k3dRuns++
								def (env_binary_path, k8s_version, kubectl_path, workers_count, nodes_count, node_memory, ip_family) =  "${K8S_VERSION}".split(';')
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) [$env_binary_path, $k8s_version, $kubectl_path, $workers_count, $nodes_count, $node_memory, $ip_family]"
								catchError {
									build job: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}", parameters: [
										string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
										string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
										string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
										string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
										string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
										string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
										string(name: 'OPERATOR_ENV_BINARY_PATH', value: env_binary_path),
										string(name: 'OPERATOR_K8S_VERSION', value: k8s_version),
										string(name: 'OPERATOR_KUBECTL_PATH', value: kubectl_path),
										string(name: 'OPERATOR_WORKERS_COUNT', value: workers_count),
										string(name: 'OPERATOR_NODES_COUNT', value: nodes_count),
										string(name: 'OPERATOR_NODE_MEMORY', value: node_memory),
										string(name: 'OPERATOR_IP_FAMILY', value: ip_family),
										string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY)
									]
								}
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) completed"
							}
						}
						post {
							always {
								echo "copy ${K8S_ENVIRONMENT}(${K8S_VERSION}) results"
								catchError {
									copyArtifacts fingerprintArtifacts: true,
										projectName: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}",
										selector: lastCompleted(),
										target: "${LOG_SUBDIR}"
								}
							}
						}
					}
				}
			}
			post {
				always {
					script {
						env.K3D_RESULT_STATUS = utils.addTestResults("k3d", k3dRuns)
					}
				}
			}
		}
		stage('kind') {
			matrix {
				axes {
					axis {
						name 'K8S_ENVIRONMENT'
						values 'kind'
					}
					// use versions similar to kind, but a little different
					// https://github.com/kubernetes-sigs/kind/releases
					// curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.17.0/kind-linux-amd64 -o kind-v0.17.0
					// node images related to a given release are listed in its description (section 'New Features')
					// format of values: 'kind-version;k8s-version-image;kubectl-version;workers-count;nodes-count-per-worker;node-memory-limit;ip-family',
					//				e.g. 'kind-v0.18.0;;kubectl-v1.26.1;2;1;8192;ipv6' - 2 workers with 1 node each, 8GB limit per node
					// 					 'kind-v0.17.0;;kubectl-v1.26.1;1;2;4096;dual' - 1 workers with 2 nodes each, 4GB limit per node
					axis {
						name 'K8S_VERSION'
						values 'kind-v0.18.0;;kubectl-v1.26.1;2;1;8192;ipv6',
							'kind-v0.18.0;;kubectl-v1.26.1;2;1;8192;dual'
					}
				}
				stages {
					stage('kind run tests') {
						steps {
							script {
								kindRuns++
								def (env_binary_path, k8s_version, kubectl_path, workers_count, nodes_count, node_memory, ip_family) =  "${K8S_VERSION}".split(';')
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) [$env_binary_path, $k8s_version, $kubectl_path, $workers_count, $nodes_count, $node_memory, $ip_family]"
								catchError {
									build job: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}", parameters: [
										string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
										string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
										string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
										string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
										string(name: 'OPERATOR_IMAGE', value: env.OPERATOR_COMMUNITY_IMAGE),
										string(name: 'OPERATOR_ENTERPRISE_IMAGE', value: params.OPERATOR_ENTERPRISE_IMAGE),
										string(name: 'OPERATOR_ENV_BINARY_PATH', value: env_binary_path),
										string(name: 'OPERATOR_K8S_VERSION', value: k8s_version),
										string(name: 'OPERATOR_KUBECTL_PATH', value: kubectl_path),
										string(name: 'OPERATOR_WORKERS_COUNT', value: workers_count),
										string(name: 'OPERATOR_NODES_COUNT', value: nodes_count),
										string(name: 'OPERATOR_NODE_MEMORY', value: node_memory),
										string(name: 'OPERATOR_IP_FAMILY', value: ip_family),
										string(name: 'OPERATOR_TRIGGERED_BY', value: params.OPERATOR_TRIGGERED_BY)
									]
								}
								echo "${K8S_ENVIRONMENT}(${K8S_VERSION}) completed"
							}
						}
						post {
							always {
								echo "copy ${K8S_ENVIRONMENT}(${K8S_VERSION}) results"
								catchError {
									copyArtifacts fingerprintArtifacts: true,
										projectName: "${env.WORKERS_FOLDER}/${K8S_ENVIRONMENT}",
										selector: lastCompleted(),
										target: "${LOG_SUBDIR}"
								}
							}
						}
					}
				}
			}
			post {
				always {
					script {
						env.KIND_RESULT_STATUS = utils.addTestResults("kind", kindRuns)
					}
				}
			}
		}
		stage('collect results') {
			steps {
				script {
					if (utils.anyResultsAvailable()) {
						build job: "${env.WORKERS_FOLDER}/prepare-test-suite-report", parameters: [
							string(name: 'OPERATOR_GIT_REPO_URL', value: params.OPERATOR_GIT_REPO_URL),
							string(name: 'OPERATOR_GIT_REPO_NAME', value: params.OPERATOR_GIT_REPO_NAME),
							string(name: 'OPERATOR_GIT_REVISION', value: params.OPERATOR_GIT_REVISION),
							string(name: 'OPERATOR_GIT_REFSPEC', value: params.OPERATOR_GIT_REFSPEC),
							string(name: 'TEST_RESULT_BUILD_URL', value: env.BUILD_URL)
						]

						copyArtifacts fingerprintArtifacts: true,
							projectName: "${env.WORKERS_FOLDER}/prepare-test-suite-report",
							selector: lastCompleted(),
							target: "${LOG_SUBDIR}"

						env.TEST_SUITE_REPORT = utils.getTestSuiteReport()
					} else {
						env.TEST_SUITE_REPORT = ""
					}
				}
			}
			post {
				cleanup {
					script {
						env.TESTS_SUITE_ISSUES = utils.getTestsSuiteIssues(true)
					}
				}
			}
		}
	}
	post {
		always {
			script {
				env.BUILD_DURATION = utils.getBuildDuration()
				env.CHANGE_LOG = utils.getChangeLog()

				sh 'ls -lRF ${LOG_DIR}'
				if (utils.anyResultsAvailable()) {
					sh "cd ${LOG_DIR} && tar cvjf ${ARTIFACT_PATH} *"
					archiveArtifacts artifacts: "${ARTIFACT_FILENAME}", fingerprint: true
				}
			}
		}
		changed {
			script {
				utils.modifyBuildStatus("changed")
			}
		}
		fixed {
			script {
				utils.modifyBuildStatus("fixed")
			}
		}
		unstable {
			script {
				utils.modifyBuildStatus("unstable")
			}
		}
		regression {
			script {
				utils.modifyBuildStatus("regression")
			}
		}
		failure {
			script {
				utils.modifyBuildStatus("failure")
			}
		}
		aborted {
			script {
				utils.modifyBuildStatus("aborted")
			}
		}
		unsuccessful {
			script {
				utils.modifyBuildStatus("unsuccessful")
			}
		}
		success {
			script {
				utils.modifyBuildStatus("success")
			}
		}
		cleanup {
			script {
				slackSend channel: "${env.SLACK_CHANNEL}",
					color: utils.getBuildResultColor(),
					attachments: utils.getBuildSummary()
			}
		}
	}
}
